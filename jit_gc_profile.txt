[[0minfo[0m] entering *experimental* thin client - BEEP WHIRR
[[0minfo[0m] terminate the server with `shutdown`
> bench/Jmh/run -i 3 -wi 2 -f 1 -prof gc .*JITBenchmark.*
[info] Copied shared files to target /Users/rssh/packages/nau/scalus/scalus-plugin/src/main/shared/scala[0J
[0J[info] running (fork) org.openjdk.jmh.Main -i 3 -wi 2 -f 1 -prof gc .*JITBenchmark.*[0J
[0J[info] # JMH version: 1.37[0J
[0J[info] # VM version: JDK 23, OpenJDK 64-Bit Server VM, 23+37[0J
[0J[info] # VM invoker: /nix/store/kr1s4c55lchjpll97iadj95zrchpdbzf-zulu-ca-jdk-23.0.0/Library/Java/JavaVirtualMachines/zulu-23.jdk/Contents/Home/bin/java[0J
[0J[info] # VM options: -Xss64m -Xmx4g[0J
[0J[info] # Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)[0J
[0J[info] # Warmup: 2 iterations, 10 s each[0J
[0J[info] # Measurement: 3 iterations, 10 s each[0J
[0J[info] # Timeout: 10 min per iteration[0J
[0J[info] # Threads: 1 thread, will synchronize iterations[0J
[0J[info] # Benchmark mode: Average time, time/op[0J
[0J[info] # Benchmark: scalus.uplc.eval.JITBenchmark.benchJIT_auction_1_1[0J
[0J[info] # Run progress: 0.00% complete, ETA 00:00:50[0J
[0J[info] # Fork: 1 of 1[0J
[0J[info] # Warmup Iteration   1: Starting JIT compilation at 1761473366129[0J
[0J[info] Calling JIT.jitUplc...[0J
[0J[info] JIT completed in 29699 ms[0J
[0J[info] 4483.913 us/op[0J
[0J[info] # Warmup Iteration   2: 2834.769 us/op[0J
[0J[info] Iteration   1: 1917.519 us/op[0J
[0J[info]                  gc.alloc.rate:      122.762 MB/sec[0J
[0J[info]                  gc.alloc.rate.norm: 246839.499 B/op[0J
[0J[info]                  gc.count:           5.000 counts[0J
[0J[info]                  gc.time:            12.000 ms[0J
[0J[info] Iteration   2: 798.184 us/op[0J
[0J[info]                  gc.alloc.rate:      249.669 MB/sec[0J
[0J[info]                  gc.alloc.rate.norm: 208966.766 B/op[0J
[0J[info]                  gc.count:           7.000 counts[0J
[0J[info]                  gc.time:            20.000 ms[0J
[0J[info] Iteration   3: 277.038 us/op[0J
[0J[info]                  gc.alloc.rate:      603.959 MB/sec[0J
[0J[info]                  gc.alloc.rate.norm: 175451.668 B/op[0J
[0J[info]                  gc.count:           24.000 counts[0J
[0J[info]                  gc.time:            65.000 ms[0J
[0J[info] Result "scalus.uplc.eval.JITBenchmark.benchJIT_auction_1_1":[0J
[0J[info]   997.580 Â±(99.9%) 15292.262 us/op [Average][0J
[0J[info]   (min, avg, max) = (277.038, 997.580, 1917.519), stdev = 838.220[0J
[0J[info]   CI (99.9%): [â‰ˆ 0, 16289.842] (assumes normal distribution)[0J
[0J[info] Secondary result "scalus.uplc.eval.JITBenchmark.benchJIT_auction_1_1:gc.alloc.rate":[0J
[0J[info]   325.463 Â±(99.9%) 4549.830 MB/sec [Average][0J
[0J[info]   (min, avg, max) = (122.762, 325.463, 603.959), stdev = 249.392[0J
[0J[info]   CI (99.9%): [â‰ˆ 0, 4875.293] (assumes normal distribution)[0J
[0J[info] Secondary result "scalus.uplc.eval.JITBenchmark.benchJIT_auction_1_1:gc.alloc.rate.norm":[0J
[0J[info]   210419.311 Â±(99.9%) 651594.165 B/op [Average][0J
[0J[info]   (min, avg, max) = (175451.668, 210419.311, 246839.499), stdev = 35716.075[0J
[0J[info]   CI (99.9%): [â‰ˆ 0, 862013.476] (assumes normal distribution)[0J
[0J[info] Secondary result "scalus.uplc.eval.JITBenchmark.benchJIT_auction_1_1:gc.count":[0J
[0J[info]   36.000 Â±(99.9%) 0.001 counts [Sum][0J
[0J[info]   (min, avg, max) = (5.000, 12.000, 24.000), stdev = 10.440[0J
[0J[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)[0J
[0J[info] Secondary result "scalus.uplc.eval.JITBenchmark.benchJIT_auction_1_1:gc.time":[0J
[0J[info]   97.000 Â±(99.9%) 0.001 ms [Sum][0J
[0J[info]   (min, avg, max) = (12.000, 32.333, 65.000), stdev = 28.572[0J
[0J[info]   CI (99.9%): [97.000, 97.000] (assumes normal distribution)[0J
[0J[info] # Run complete. Total time: 00:01:20[0J
[0J[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on[0J
[0J[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial[0J
[0J[info] experiments, perform baseline and negative tests that provide experimental control, make sure[0J
[0J[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.[0J
[0J[info] Do not assume the numbers tell you what you want them to tell.[0J
[0J[info] NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise[0J
[0J[info] extra caution when trusting the results, look into the generated code to check the benchmark still[0J
[0J[info] works, and factor in a small probability of new VM bugs. Additionally, while comparisons between[0J
[0J[info] different JVMs are already problematic, the performance difference caused by different Blackhole[0J
[0J[info] modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.[0J
[0J[info] Benchmark                                             Mode  Cnt       Score        Error   Units[0J
[0J[info] JITBenchmark.benchJIT_auction_1_1                     avgt    3     997.580 Â±  15292.262   us/op[0J
[0J[info] JITBenchmark.benchJIT_auction_1_1:gc.alloc.rate       avgt    3     325.463 Â±   4549.830  MB/sec[0J
[0J[info] JITBenchmark.benchJIT_auction_1_1:gc.alloc.rate.norm  avgt    3  210419.311 Â± 651594.165    B/op[0J
[0J[info] JITBenchmark.benchJIT_auction_1_1:gc.count            avgt    3      36.000               counts[0J
[0J[info] JITBenchmark.benchJIT_auction_1_1:gc.time             avgt    3      97.000                   ms[0J
[0J[[32msuccess[0m] Total time: 82 s (0:01:22.0), completed Oct 26, 2025, 12:10:46 PM
[0J